const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const crypto = require('crypto');
const axios = require('axios');
const blockchainService = require('./blockchainService');
const { connectDB, getDB } = require('./db');
const keyManager = require('./utils/keyManager');
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π MongoDB
const User = require('./models/User');
const VpnKey = require('./models/VpnKey');
const Payment = require('./models/Payment');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const PORT = process.env.PORT || 5000;
const BOT_USERNAME = process.env.TELEGRAM_BOT_USERNAME || 'Kittypoopvpn_bot';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
const paymentTimers = new Map();

// Middleware
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true
}));
app.use(express.json());

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.originalUrl}`);
  next();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN || '7651266107:AAEEPCBB9CvPOfY9H3vjENOiR2q4jWU-Iik';
// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—ç—à–∞
const botTokenFirstPart = token.split(':')[0] || '7651266107';

const bot = new TelegramBot(token, { polling: true });

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
const generateTelegramHash = (userData) => {
  // –°–æ–∑–¥–∞–µ–º data-check-string
  const dataCheckArr = Object.keys(userData)
    .filter(key => key !== 'hash')
    .sort()
    .map(key => `${key}=${userData[key]}`);
  
  const dataCheckString = dataCheckArr.join('\n');
  
  // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
  const secret = crypto.createHash('sha256').update(botTokenFirstPart).digest();
  
  // –°–æ–∑–¥–∞–µ–º —Ö—ç—à
  return crypto.createHmac('sha256', secret)
              .update(dataCheckString)
              .digest('hex');
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ, –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î)
const authTokens = new Map();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
bot.onText(/\/start auth_(.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const authToken = match[1];
  
  console.log(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å —Ç–æ–∫–µ–Ω–æ–º: ${authToken}`);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
  await bot.sendAnimation(chatId, 'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExcmN1dmZvMDV3Y2Jhamo0MzF5NjRkM3NyczRlOXZ4bmphYWNneDEwaSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3ohhwpkATGtSV4Mhfa/giphy.gif', {
    caption: `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KittyPoopVPN!* üê±\n\n–ò–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∫–∞ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.`,
    parse_mode: 'Markdown'
  });
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  const userData = {
    id: msg.from.id,
    first_name: msg.from.first_name || '',
    last_name: msg.from.last_name || '',
    username: msg.from.username || '',
    photo_url: '', // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    auth_date: Math.floor(Date.now() / 1000)
  };
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
  userData.hash = generateTelegramHash(userData);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Ç–æ–∫–µ–Ω—É
  authTokens.set(authToken, userData);
  console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${authToken}:`, userData);
  
  // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  try {
    const photos = await bot.getUserProfilePhotos(msg.from.id, { limit: 1 });
    if (photos && photos.total_count > 0) {
      const fileId = photos.photos[0][0].file_id;
      const fileInfo = await bot.getFile(fileId);
      // –î–æ–±–∞–≤–ª—è–µ–º URL —Ñ–æ—Ç–æ –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userData.photo_url = `https://api.telegram.org/file/bot${token}/${fileInfo.file_path}`;
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      authTokens.set(authToken, userData);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:', error);
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  setTimeout(async () => {
    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —Å–∞–π—Ç —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
    const returnUrl = `${process.env.FRONTEND_URL || 'https://kittypoopvpn.com'}/auth-success?token=${authToken}&redirect=/profile`;
    
    await bot.sendMessage(chatId, 
      `‚úÖ *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!* ‚úÖ\n\n`+
      `–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ KittyPoopVPN! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ VPN-–∫–ª—é—á–∞–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.`, 
      { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'my_profile' }],
            [{ text: 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url: process.env.FRONTEND_URL || 'https://kittypoopvpn.com' }]
          ]
        }
      }
    );
  }, 2000);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/^\/start$/, (msg) => {
  const chatId = msg.chat.id;
  
  bot.sendPhoto(chatId, 'https://i.imgur.com/V1RwQVE.jpg', {
    caption: `üéâ *–ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç KittyPoopVPN* üê±\n\n`+
      `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º VPN-–∞–∫–∫–∞—É–Ω—Ç–æ–º –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –∫–ª—é—á–∞—Ö.`,
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'my_profile' }],
        [{ text: 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url: process.env.FRONTEND_URL || 'https://kittypoopvpn.com' }]
      ]
    }
  });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
app.get('/api/auth/:token', async (req, res) => {
  const { token } = req.params;
  console.log(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞: ${token}`);
  
  if (authTokens.has(token)) {
    const userData = authTokens.get(token);
    console.log(`–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${token}:`, userData);
    
    try {
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –ø–æ Telegram ID
      let user = await User.findByTelegramId(userData.id);
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
      if (!user) {
        const newUserData = {
          telegramId: userData.id,
          firstName: userData.first_name,
          lastName: userData.last_name,
          username: userData.username,
          authDate: new Date(userData.auth_date * 1000).toISOString(),
          lastLogin: new Date().toISOString()
        };
        
        user = await User.create(newUserData);
        console.log(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è Telegram ID ${userData.id}`);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const updateData = {
          firstName: userData.first_name,
          lastName: userData.last_name,
          username: userData.username,
          lastLogin: new Date().toISOString()
        };
        
        user = await User.update(user.id, updateData);
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID ${userData.id}`);
      }
      
      // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      authTokens.delete(token);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      return res.json({ 
        success: true, 
        user: {
          id: user.id,
          telegramId: user.telegramId,
          firstName: user.firstName,
          lastName: user.lastName,
          username: user.username
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return res.status(500).json({ 
        success: false, 
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
      });
    }
  }
  
  return res.status(404).json({ success: false, message: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' });
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞
app.post('/api/trial-key', async (req, res) => {
  try {
    const { uuid, expiryTime, userId } = req.body;
    
    if (!uuid || !userId) {
      return res.status(400).json({ 
        success: false, 
        message: '–ù–µ —É–∫–∞–∑–∞–Ω UUID –∫–ª—é—á–∞ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    if (userId !== 'anonymous-user') {
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({ 
          success: false, 
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
        });
      }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ - 1 —á–∞—Å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    let expiry;
    if (expiryTime) {
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–∏—à–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO —Å—Ç—Ä–æ–∫–∏
      expiry = new Date(expiryTime);
    } else {
      // –ò–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º +1 —á–∞—Å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      expiry = new Date(Date.now() + 60 * 60 * 1000);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    if (isNaN(expiry.getTime())) {
      return res.status(400).json({ 
        success: false, 
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞' 
      });
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VLESS
    const vlessUUID = crypto.randomUUID();
    const vlessConfig = `vless://${vlessUUID}@vpn.kittypoopvpn.com:443?security=tls&encryption=none&headerType=none&type=tcp&sni=vpn.kittypoopvpn.com#KittyPoopVPN_Trial`;

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–±–Ω–æ–º –∫–ª—é—á–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const vpnKeyData = {
      uuid,
      userId,
      plan: 'trial',
      period: 0, // 0 –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞
      created: new Date().toISOString(),
      expires: expiry.toISOString(),
      isActive: 1,
      isTrial: 1,
      config: vlessConfig
    };
    
    const vpnKey = await VpnKey.create(vpnKeyData);
    
    console.log(`–°–æ–∑–¥–∞–Ω –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á ${uuid} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ ${expiry}`);
    
    return res.json({ 
      success: true, 
      uuid, 
      expires: expiry,
      message: '–ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞:', error);
    return res.status(500).json({ 
      success: false, 
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞'
    });
  }
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞
app.get('/api/trial-key/:uuid', async (req, res) => {
  const { uuid } = req.params;
  
  try {
    const vpnKey = await VpnKey.findByUuid(uuid);
    
    if (!vpnKey) {
      return res.status(404).json({ 
        success: false, 
        message: '–ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
    
    const now = new Date();
    const expiryDate = new Date(vpnKey.expires);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞
    if (now > expiryDate) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–∞ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
      await VpnKey.update(uuid, { isActive: 0 });
      
      return res.json({
        success: true,
        isActive: false,
        message: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏—Å—Ç–µ–∫',
        expires: vpnKey.expires
      });
    }
    
    return res.json({
      success: true,
      isActive: vpnKey.isActive === 1,
      expires: vpnKey.expires,
      config: vpnKey.config,
      message: '–ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞:', error);
    return res.status(500).json({ 
      success: false, 
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞'
    });
  }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –ø–ª–∞—Ç–µ–∂–∞
const generatePaymentId = () => {
  return `payment_${Date.now()}_${crypto.randomBytes(4).toString('hex')}`;
};

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–∞
app.post('/api/crypto-payment', async (req, res) => {
  try {
    console.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:', req.body);
    
    const { userId, plan, period, currency, amount } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!userId || !plan || !period || !currency) {
      console.error('–ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', { userId, plan, period, currency });
      return res.status(400).json({
        success: false,
        message: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
      });
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!currency || !plan || !period || !userId) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ 
        success: false, 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞–Ω–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
    let finalAmount;
    if (amount) {
      // –ï—Å–ª–∏ —Å—É–º–º–∞ —É–∂–µ –∑–∞–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
      finalAmount = amount;
    } else {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
      if (period === 'yearly' || period === 12) {
        finalAmount = 1500; // –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - 1500‚ÇΩ
      } else if (period === 'quarterly' || period === 3) {
        finalAmount = 500; // –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - 500‚ÇΩ
      } else if (period === 'monthly' || period === 1 || 
                (typeof period === 'string' && period.toLowerCase() === 'monthly')) {
        finalAmount = 200; // –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - 200‚ÇΩ
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        finalAmount = 200;
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
      if (plan === 'premium') {
        // –ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω (–ù–∞—à —Å–ª–æ–Ω—è—Ä–∞) - –≤—Å–µ–≥–¥–∞ –≥–æ–¥–æ–≤–æ–π
        finalAmount = 1500;
      }
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    const cryptoAddress = await blockchainService.generatePaymentAddress(currency);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—É–º–º—ã –≤ –∫—Ä–∏–ø—Ç–æ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è API –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç)
    let cryptoAmount;
    const rates = {
      eth: 3000, // USD –∑–∞ 1 ETH
      usdt: 1, // USD –∑–∞ 1 USDT
      usdt_eth: 1, // USD –∑–∞ 1 USDT ERC20
      usdt_trc20: 1, // USD –∑–∞ 1 USDT
      ton: 5 // USD –∑–∞ 1 TON
    };
    
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å —Ä—É–±–ª—è –∫ –¥–æ–ª–ª–∞—Ä—É
    const rubToUsd = 0.011; // –ü—Ä–∏–º–µ—Ä–Ω–æ 90 —Ä—É–±–ª–µ–π –∑–∞ –¥–æ–ª–ª–∞—Ä
    const amountUsd = finalAmount * rubToUsd;
    
    // –í—ã–±–∏—Ä–∞–µ–º –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
    let rate = rates[currency];
    if (!rate) {
      // –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞: ${currency}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—É—Ä—Å USDT`);
      rate = rates.usdt;
    }
    
    cryptoAmount = parseFloat((amountUsd / rate).toFixed(8));
    
    // –°–æ–∑–¥–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞
    const paymentId = generatePaymentId();
    
    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ (30 –º–∏–Ω—É—Ç)
    const expiryTime = new Date(Date.now() + 30 * 60 * 1000);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∏—Å–ª–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    let numericPeriod;
    if (period === 'yearly') {
      numericPeriod = 12;
    } else if (period === 'quarterly') {
      numericPeriod = 3;
    } else if (period === 'monthly') {
      numericPeriod = 1;
    } else {
      // –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∑–∞–¥–∞–Ω —á–∏—Å–ª–æ–º
      numericPeriod = parseInt(period);
      if (isNaN(numericPeriod) || numericPeriod <= 0) {
        numericPeriod = 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–µ—Å—è—Ü
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const paymentData = {
      paymentId,
      userId,
      status: 'pending',
      amount: finalAmount,
      currency,
      cryptoAmount,
      cryptoAddress,
      plan,
      period: numericPeriod,
      expiryTime: expiryTime.toISOString()
    };
    
    const payment = await Payment.create(paymentData);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
    startPaymentVerification(paymentId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Ç–≤–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    return res.json({
      success: true,
      payment: {
        paymentId,
        amount: finalAmount,
        currency,
        cryptoAmount,
        cryptoAddress,
        plan,
        period,
        expiryTime
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–∞:', error);
    return res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞'
    });
  }
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
app.get('/api/crypto-payment/:paymentId', async (req, res) => {
  try {
    const { paymentId } = req.params;
    
    // –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const payment = await Payment.findOne({ paymentId });
    
    if (!payment) {
      return res.status(404).json({
        success: false,
        message: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    const now = new Date();
    if (payment.status === 'pending' && now > payment.expiryTime) {
      payment.status = 'expired';
      await payment.save();
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (paymentTimers.has(paymentId)) {
        clearInterval(paymentTimers.get(paymentId));
        paymentTimers.delete(paymentId);
      }
    }
    
    // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–∫–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ
    let vpnKey = null;
    if (payment.status === 'completed' && payment.vpnKeyUuid) {
      vpnKey = await VpnKey.findOne({ uuid: payment.vpnKeyUuid });
    }
    
    return res.json({
      success: true,
      payment: {
        paymentId: payment.paymentId,
        status: payment.status,
        amount: payment.amount,
        currency: payment.currency,
        cryptoAmount: payment.cryptoAmount,
        cryptoAddress: payment.cryptoAddress,
        plan: payment.plan,
        period: payment.period,
        expiryTime: payment.expiryTime,
        completedAt: payment.completedAt,
        transactionId: payment.transactionId,
        vpnKeyUuid: payment.vpnKeyUuid
      },
      vpnKey: vpnKey ? {
        uuid: vpnKey.uuid,
        plan: vpnKey.plan,
        period: vpnKey.period,
        created: vpnKey.created,
        expires: vpnKey.expires,
        isActive: vpnKey.isActive,
        config: vpnKey.config
      } : null
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–∞:', error);
    return res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞'
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
async function startPaymentVerification(paymentId) {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const payment = await Payment.findByPaymentId(paymentId);
  
  if (!payment || payment.status !== 'pending') {
    console.log(`–ü–ª–∞—Ç–µ–∂ ${paymentId} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ 'pending')`);
    return;
  }
  
  console.log(`–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞ ${paymentId}`);
  
  // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
  const intervalId = setInterval(async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const updatedPayment = await Payment.findByPaymentId(paymentId);
      
      if (!updatedPayment || updatedPayment.status !== 'pending') {
        console.log(`–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ ${paymentId}: –∏–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –ø–ª–∞—Ç–µ–∂ —É–¥–∞–ª–µ–Ω`);
        clearInterval(intervalId);
        paymentTimers.delete(paymentId);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
      const now = new Date();
      const expiryTime = new Date(updatedPayment.expiryTime);
      
      if (now > expiryTime) {
        console.log(`–ü–ª–∞—Ç–µ–∂ ${paymentId} –∏—Å—Ç–µ–∫`);
        await Payment.update(paymentId, { status: 'expired' });
        clearInterval(intervalId);
        paymentTimers.delete(paymentId);
        return;
      }
      
      console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ ${paymentId} –≤ –±–ª–æ–∫—á–µ–π–Ω–µ...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –±–ª–æ–∫—á–µ–π–Ω-—Å–µ—Ç–∏
      const paymentResult = await blockchainService.checkPayment(
        updatedPayment.currency,
        updatedPayment.cryptoAddress,
        updatedPayment.cryptoAmount,
        updatedPayment.createdAt
      );
      
      // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
      if (paymentResult.confirmed) {
        console.log(`–ü–ª–∞—Ç–µ–∂ ${paymentId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ!`);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VPN –∫–ª—é—á
        const vpnKeyData = await generateVpnKey(updatedPayment.plan, updatedPayment.period, updatedPayment.userId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        await Payment.update(paymentId, {
          status: 'completed',
          completedAt: new Date().toISOString(),
          transactionId: paymentResult.txId,
          vpnKeyUuid: vpnKeyData.uuid
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await sendVpnKeyToUser(updatedPayment, vpnKeyData);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        clearInterval(intervalId);
        paymentTimers.delete(paymentId);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ ${paymentId}:`, error);
    }
  }, 30000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  paymentTimers.set(paymentId, intervalId);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VPN –∫–ª—é—á–∞
async function generateVpnKey(plan, period, userId) {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–ª—é—á–∞
  const uuid = `vpn_${crypto.randomBytes(8).toString('hex')}`;
  
  // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞
  const now = new Date();
  const expires = new Date(now);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
  if (period === 'yearly' || period === 12) {
    // –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ–º 12 –º–µ—Å—è—Ü–µ–≤
    expires.setMonth(expires.getMonth() + 12);
  } else if (period === 'quarterly' || period === 3) {
    // –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (3 –º–µ—Å—è—Ü–∞)
    expires.setMonth(expires.getMonth() + 3);
  } else if (period === 'monthly' || period === 1) {
    // –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ–º 1 –º–µ—Å—è—Ü
    expires.setMonth(expires.getMonth() + 1);
  } else {
    // –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ —É–∫–∞–∑–∞–Ω –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤)
    const numericPeriod = parseInt(period);
    if (!isNaN(numericPeriod) && numericPeriod > 0) {
      expires.setMonth(expires.getMonth() + numericPeriod);
    } else {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - 1 –º–µ—Å—è—Ü
      expires.setMonth(expires.getMonth() + 1);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VLESS-–∫–ª—é—á–∞
  const vlessUUID = crypto.randomUUID();
  let planSuffix = '';
  
  switch (plan) {
    case 'basic':
      planSuffix = '_Basic';
      break;
    case 'premium':
      planSuffix = '_Premium';
      break;
    case 'unlimited':
      planSuffix = '_Unlimited';
      break;
    default:
      planSuffix = '';
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VLESS
  const config = `vless://${vlessUUID}@vpn.kittypoopvpn.com:443?security=tls&encryption=none&headerType=none&type=tcp&sni=vpn.kittypoopvpn.com#KittyPoopVPN${planSuffix}`;

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ –≤ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
  let numericPeriod;
  if (period === 'yearly') {
    numericPeriod = 12;
  } else if (period === 'quarterly') {
    numericPeriod = 3;
  } else if (period === 'monthly') {
    numericPeriod = 1;
  } else {
    // –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∑–∞–¥–∞–Ω —á–∏—Å–ª–æ–º
    numericPeriod = parseInt(period);
    if (isNaN(numericPeriod) || numericPeriod <= 0) {
      numericPeriod = 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–µ—Å—è—Ü
    }
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const vpnKeyData = {
    uuid,
    userId,
    plan,
    period: numericPeriod,
    created: now.toISOString(),
    expires: expires.toISOString(),
    isActive: 1,
    isTrial: 0,
    config
  };
  
  // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const vpnKey = await VpnKey.create(vpnKeyData);
  
  return vpnKey;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendVpnKeyToUser(paymentData, vpnKeyData) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(paymentData.userId);
    
    if (!user) {
      console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID ${paymentData.userId}`);
      return;
    }
    
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å Telegram ID, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    if (user.telegramId) {
      // –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN
      const qrCodeUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(vpnKeyData.config)}`;
      
      // –ì–æ—Ç–æ–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
      let planInfo = '';
      if (vpnKeyData.plan === 'basic') {
        planInfo = 'üîµ –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω';
      } else if (vpnKeyData.plan === 'premium') {
        planInfo = 'üü£ –ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω';
      } else if (vpnKeyData.plan === 'unlimited') {
        planInfo = '‚≠ê –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø–ª–∞–Ω';
      } else {
        planInfo = 'üî∂ –ü—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω';
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ V2ray
      const installInstructions = `
üì± *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ V2ray:*
1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayTUN (iOS) –∏–ª–∏ V2rayNG (Android) –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞" –∏–ª–∏ "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥"
3. –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π VLESS-–∫–ª—é—á –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥
4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É

üí° *–°–æ–≤–µ—Ç:* –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –º–æ–∂–Ω–æ –ø—Ä—è–º–æ —Å —ç–∫—Ä–∞–Ω–∞ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–∫—Ä—ã—Ç —ç—Ç–æ—Ç —á–∞—Ç.
`;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const message = `
üéâ *–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!* üéâ

${planInfo}
üîë *–í–∞—à VLESS –∫–ª—é—á –≥–æ—Ç–æ–≤!*

üìã *–î–µ—Ç–∞–ª–∏ –∫–ª—é—á–∞:*
‚Ä¢ UUID: \`${vpnKeyData.uuid}\`
‚Ä¢ –¢–∏–ø: VLESS
‚Ä¢ –ü–ª–∞–Ω: ${vpnKeyData.plan}
‚Ä¢ –ü–µ—Ä–∏–æ–¥: ${vpnKeyData.period} –º–µ—Å.
‚Ä¢ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${new Date(vpnKeyData.expires).toLocaleDateString()}

‚öôÔ∏è *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:*
\`\`\`
${vpnKeyData.config}
\`\`\`

${installInstructions}

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ KittyPoopVPN! üê±
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É.
      `;
      
      // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ —Å —á–∞—Å—Ç—å—é —Å–æ–æ–±—â–µ–Ω–∏—è
      await bot.sendPhoto(user.telegramId, qrCodeUrl, {
        caption: `üéâ *–í–∞—à VLESS –∫–ª—é—á –≥–æ—Ç–æ–≤!* üéâ\n\n–ù–∏–∂–µ QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n–°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.`,
        parse_mode: 'Markdown'
      });
      
      // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.sendMessage(user.telegramId, message, { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url: `${process.env.FRONTEND_URL || 'https://kittypoopvpn.com'}` }],
            [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
          ]
        }
      });
      
      console.log(`VPN –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram`);
    } else {
      console.log(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç Telegram ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª—é—á–∞`);
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ email, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å email
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ VPN –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
  }
}

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/vpn-keys/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ 
        success: false, 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const vpnKeys = await VpnKey.find({ userId });
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const formattedKeys = vpnKeys.map(key => ({
      uuid: key.uuid,
      plan: key.plan,
      period: key.period,
      created: key.created,
      expires: key.expires,
      isActive: key.isActive,
      isTrial: key.isTrial,
      config: key.config
    }));
    
    return res.json({
      success: true,
      keys: formattedKeys
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ VPN –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ VPN –∫–ª—é—á–µ–π'
    });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/payment-history/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ 
        success: false, 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const payments = await Payment.find({ userId }).sort({ createdAt: -1 });
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const formattedPayments = payments.map(payment => ({
      paymentId: payment.paymentId,
      status: payment.status,
      amount: payment.amount,
      currency: payment.currency,
      cryptoAmount: payment.cryptoAmount,
      plan: payment.plan,
      period: payment.period,
      createdAt: payment.createdAt,
      completedAt: payment.completedAt,
      vpnKeyUuid: payment.vpnKeyUuid
    }));
    
    return res.json({
      success: true,
      payments: formattedPayments
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π'
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite
app.get('/api/db-test', async (req, res) => {
  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const db = getDB();
    const usersCount = await db.get('SELECT COUNT(*) as count FROM users');
    
    return res.json({
      success: true,
      message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —Ä–∞–±–æ—Ç–∞–µ—Ç!',
      stats: {
        users: usersCount.count
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite:', error);
    return res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite',
      error: error.message
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/^\/help$/, (msg) => {
  const chatId = msg.chat.id;
  
  const helpMessage = `
üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º* üìö

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ üöÄ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ üìñ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ üìä /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ ‚ùì /faq - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã

üîπ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Kitty Poop VPN?*
1Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ —á–µ—Ä–µ–∑ Telegram
2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É
3Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ OpenVPN –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
4Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á (–≤—Ä—É—á–Ω—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ QR-–∫–æ–¥)
5Ô∏è‚É£ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!

üîí *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞—à–µ–≥–æ VPN:*
‚Ä¢ üîê –ù–∞–¥–µ–∂–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞
‚Ä¢ ‚ö° –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
‚Ä¢ üåç –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É
‚Ä¢ üîì –î–æ—Å—Ç—É–ø –∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–∞–π—Ç–∞–º
‚Ä¢ üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≤ —Å–µ—Ç–∏
`;

  bot.sendMessage(chatId, helpMessage, { 
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìö –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', url: `${process.env.FRONTEND_URL || 'https://kittypoopvpn.com'}/faq` }],
        [{ text: '‚ùì FAQ', callback_data: 'faq' }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
bot.onText(/^\/status$/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id;
  
  try {
    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    const user = await User.findByTelegramId(telegramId);
    
    if (!user) {
      return bot.sendMessage(chatId, 
        '‚ùå *–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ*\n\n' +
        '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.',
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', url: process.env.FRONTEND_URL || 'https://kittypoopvpn.com' }]
            ]
          }
        }
      );
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const vpnKeys = await VpnKey.find({ userId: user.id });
    
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–ª—é—á–µ–π
    if (!vpnKeys || vpnKeys.length === 0) {
      return bot.sendMessage(chatId, 
        'üîç *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç VPN –∫–ª—é—á–µ–π*\n\n' +
        '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á –Ω–∞ 1 —á–∞—Å –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–ª–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.',
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', url: `${process.env.FRONTEND_URL || 'https://kittypoopvpn.com'}/pricing` }]
            ]
          }
        }
      );
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏: —Å–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ, –ø–æ—Ç–æ–º –ø–æ –¥–∞—Ç–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ —Ç–µ, —á—Ç–æ –∏—Å—Ç–µ–∫–∞—é—Ç –ø–æ–∑–∂–µ)
    vpnKeys.sort((a, b) => {
      // –ï—Å–ª–∏ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–µ–Ω, –∞ –¥—Ä—É–≥–æ–π –Ω–µ—Ç, –∞–∫—Ç–∏–≤–Ω—ã–π –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º
      if (a.isActive !== b.isActive) {
        return b.isActive - a.isActive;
      }
      // –ò–Ω–∞—á–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ —Ç–µ, —á—Ç–æ –∏—Å—Ç–µ–∫–∞—é—Ç –ø–æ–∑–∂–µ)
      return new Date(b.expires) - new Date(a.expires);
    });
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–∞—Ö
    let keysList = '';
    const now = new Date();
    
    vpnKeys.forEach((key, index) => {
      const expiryDate = new Date(key.expires);
      const isExpired = now > expiryDate;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —ç–º–æ–¥–∑–∏
      let status, emoji;
      if (key.isActive === 1 && !isExpired) {
        status = '–ê–∫—Ç–∏–≤–µ–Ω';
        emoji = '‚úÖ';
      } else if (isExpired) {
        status = '–ò—Å—Ç–µ–∫';
        emoji = '‚è±Ô∏è';
      } else {
        status = '–û—Ç–∫–ª—é—á–µ–Ω';
        emoji = '‚ùå';
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞–Ω–∞
      let planEmoji;
      switch (key.plan) {
        case 'basic':
          planEmoji = 'üîµ';
          break;
        case 'premium':
          planEmoji = 'üü£';
          break;
        case 'unlimited':
          planEmoji = '‚≠ê';
          break;
        case 'trial':
          planEmoji = 'üî∂';
          break;
        default:
          planEmoji = 'üîπ';
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞
      const formattedExpiry = expiryDate.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      keysList += `${index + 1}. ${emoji} ${planEmoji} *${key.plan.charAt(0).toUpperCase() + key.plan.slice(1)}*\n` +
        `   üìÖ –î–æ: ${formattedExpiry}\n` +
        `   üîë ID: \`${key.uuid}\`\n` +
        `   üìä –°—Ç–∞—Ç—É—Å: ${status}\n\n`;
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const statusMessage = `
üìä *–°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö VPN –∫–ª—é—á–µ–π* üìä

${keysList}
–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.
–¢–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
`;
    
    bot.sendMessage(chatId, statusMessage, { 
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîë –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á', callback_data: 'trial_key' }],
          [{ text: 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', url: `${process.env.FRONTEND_URL || 'https://kittypoopvpn.com'}/profile` }],
          [{ text: 'üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', url: `${process.env.FRONTEND_URL || 'https://kittypoopvpn.com'}/pricing` }]
        ]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    bot.sendMessage(chatId, 
      '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n' +
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
      { parse_mode: 'Markdown' }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /faq - —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
bot.onText(/^\/faq$/, (msg) => {
  const chatId = msg.chat.id;
  sendFaqMessage(chatId);
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è FAQ
function sendFaqMessage(chatId) {
  const faqMessage = `
‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã* ‚ùì

*üîç –ß—Ç–æ —Ç–∞–∫–æ–µ KittyPoopVPN?*
KittyPoopVPN - —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–Ω–æ–π —Å–µ—Ç–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.

*üì± –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN –Ω–∞ –º–æ–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ?*
–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª VLESS. –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ VLESS-–∫–ª—é—á –∏ QR-–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayTUN (iOS) –∏–ª–∏ V2rayNG (Android).

*üî¢ –ù–∞ —Å–∫–æ–ª—å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∫–ª—é—á?*
–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏:
‚Ä¢ üîµ –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω: –¥–æ 2 —É—Å—Ç—Ä–æ–π—Å—Ç–≤
‚Ä¢ üü£ –ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω: –¥–æ 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤
‚Ä¢ ‚≠ê –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø–ª–∞–Ω: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

*‚è±Ô∏è –ï—Å—Ç—å –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥?*
–î–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á –Ω–∞ 1 —á–∞—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.

*üí∞ –ö–∞–∫–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ?*
–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: ETH, USDT (ERC20/TRC20) –∏ TON.

*üîÑ –ö–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?*
–ü–æ—Å–µ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –∫–ª—é—á–∏" –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –∫–ª—é—á–∞.

*üìû –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?*
–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –Ω–∞ –∞–¥—Ä–µ—Å support@kittypoopvpn.com –∏–ª–∏ —á–µ—Ä–µ–∑ Telegram @kittypoopvpn_support.

*‚¨áÔ∏è –ì–¥–µ —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è?*
–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.
`;

  bot.sendMessage(chatId, faqMessage, { 
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        // –°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        [
          { text: 'üì± Android V2rayNG', url: 'https://play.google.com/store/apps/details?id=com.v2ray.ang' },
          { text: 'üçé iOS V2rayTUN', url: 'https://apps.apple.com/us/app/v2raytun/id1501776752' }
        ],
        [
          { text: 'üñ•Ô∏è Windows v2rayN', url: 'https://github.com/2dust/v2rayN/releases' },
          { text: 'üçè macOS V2rayU', url: 'https://github.com/yanue/V2rayU/releases' }
        ],
        [
          { text: 'üêß Linux v2ray', url: 'https://github.com/v2fly/v2ray-core' }
        ],
        // –î—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏
        [{ text: 'üìö –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', url: `${process.env.FRONTEND_URL || 'https://kittypoopvpn.com'}/faq` }],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
      ]
    }
  });
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const connected = await connectDB();
  
  if (!connected) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í—ã—Ö–æ–¥...');
    process.exit(1);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∫–ª—é—á–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–ª—é—á–µ–π
  await keyManager.startKeyStatusChecker();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
  await bot.answerCallbackQuery(callbackQuery.id, { text: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...' });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  if (data.startsWith('approve_payment_')) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (userId.toString() !== '434532312') {
      await bot.sendMessage(chatId, 
        '‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω*\n\n' +
        '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏.',
        { parse_mode: 'Markdown' }
      );
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ callback_data
    const paymentId = data.replace('approve_payment_', '');
    
    try {
      // –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const payment = await Payment.findByPaymentId(paymentId);
      
      if (!payment) {
        await bot.sendMessage(chatId, 
          '‚ùå *–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω*\n\n' +
          `–ü–ª–∞—Ç–µ–∂ —Å ID ${paymentId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`,
          { parse_mode: 'Markdown' }
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂
      if (payment.status !== 'waiting_confirmation') {
        await bot.sendMessage(chatId, 
          '‚ö†Ô∏è *–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂*\n\n' +
          `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${payment.status}\n` +
          '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "waiting_confirmation".',
          { parse_mode: 'Markdown' }
        );
        return;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await bot.sendMessage(chatId, 
        'üîÑ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞*\n\n' +
        '–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ì–µ–Ω–µ—Ä–∏—Ä—É—é VPN-–∫–ª—é—á...',
        { parse_mode: 'Markdown' }
      );
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VPN –∫–ª—é—á
      const vpnKeyData = await generateVpnKey(payment.plan, payment.period, payment.userId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      await Payment.update(paymentId, {
        status: 'completed',
        completedAt: new Date().toISOString(),
        vpnKeyUuid: vpnKeyData.uuid
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await sendVpnKeyToUser(payment, vpnKeyData);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
      await bot.sendMessage(chatId, 
        '‚úÖ *–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω*\n\n' +
        `–ü–ª–∞—Ç–µ–∂ —Å ID ${paymentId} –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n` +
        `VPN-–∫–ª—é—á (${vpnKeyData.uuid}) —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.`,
        { parse_mode: 'Markdown' }
      );
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:', error);
      await bot.sendMessage(chatId, 
        '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n' +
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.',
        { parse_mode: 'Markdown' }
      );
    }
    
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  if (data.startsWith('reject_payment_')) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (userId.toString() !== '434532312') {
      await bot.sendMessage(chatId, 
        '‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω*\n\n' +
        '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å –ø–ª–∞—Ç–µ–∂–∏.',
        { parse_mode: 'Markdown' }
      );
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ callback_data
    const paymentId = data.replace('reject_payment_', '');
    
    try {
      // –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const payment = await Payment.findByPaymentId(paymentId);
      
      if (!payment) {
        await bot.sendMessage(chatId, 
          '‚ùå *–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω*\n\n' +
          `–ü–ª–∞—Ç–µ–∂ —Å ID ${paymentId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`,
          { parse_mode: 'Markdown' }
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂
      if (payment.status !== 'waiting_confirmation') {
        await bot.sendMessage(chatId, 
          '‚ö†Ô∏è *–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂*\n\n' +
          `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${payment.status}\n` +
          '–û—Ç–∫–ª–æ–Ω–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "waiting_confirmation".',
          { parse_mode: 'Markdown' }
        );
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      await Payment.update(paymentId, {
        status: 'rejected',
        completedAt: new Date().toISOString()
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
      const user = await User.findById(payment.userId);
      if (user && user.telegramId) {
        await bot.sendMessage(user.telegramId, 
          '‚ùå *–í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω*\n\n' +
          `–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É ${payment.amount} ${payment.currency} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n` +
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.',
          { parse_mode: 'Markdown' }
        );
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
      await bot.sendMessage(chatId, 
        '‚úÖ *–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω*\n\n' +
        `–ü–ª–∞—Ç–µ–∂ —Å ID ${paymentId} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n` +
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.',
        { parse_mode: 'Markdown' }
      );
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:', error);
      await bot.sendMessage(chatId, 
        '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n' +
        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.',
        { parse_mode: 'Markdown' }
      );
    }
    
    return;
  }
  
  if (data === 'my_profile') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await User.findByTelegramId(userId);
    
    if (!user) {
      await bot.sendMessage(chatId, 
        '‚ùå *–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ*\n\n' +
        '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.',
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', url: process.env.FRONTEND_URL || 'https://kittypoopvpn.com' }]
            ]
          }
        }
      );
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const vpnKeys = await VpnKey.find({ userId: user.id });
    
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–ª—é—á–µ–π
    if (!vpnKeys || vpnKeys.length === 0) {
      return bot.sendMessage(chatId, 
        'üîç *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç VPN –∫–ª—é—á–µ–π*\n\n' +
        '–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç.',
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', url: `${process.env.FRONTEND_URL || 'https://kittypoopvpn.com'}/pricing` }],
              [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
            ]
          }
        }
      );
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏: —Å–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ, –ø–æ—Ç–æ–º –ø–æ –¥–∞—Ç–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ —Ç–µ, —á—Ç–æ –∏—Å—Ç–µ–∫–∞—é—Ç –ø–æ–∑–∂–µ)
    vpnKeys.sort((a, b) => {
      // –ï—Å–ª–∏ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–µ–Ω, –∞ –¥—Ä—É–≥–æ–π –Ω–µ—Ç, –∞–∫—Ç–∏–≤–Ω—ã–π –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º
      if (a.isActive !== b.isActive) {
        return b.isActive - a.isActive;
      }
      // –ò–Ω–∞—á–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ —Ç–µ, —á—Ç–æ –∏—Å—Ç–µ–∫–∞—é—Ç –ø–æ–∑–∂–µ)
      return new Date(b.expires) - new Date(a.expires);
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userInfoMessage = `
üîπ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* üîπ

üë§ *${user.firstName || ''} ${user.lastName || ''}*
${user.username ? `@${user.username}` : ''}
ID: \`${user.telegramId}\`
    `;
    
    await bot.sendMessage(chatId, userInfoMessage, { parse_mode: 'Markdown' });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    for (let i = 0; i < vpnKeys.length; i++) {
      const key = vpnKeys[i];
      const expiryDate = new Date(key.expires);
      const isExpired = new Date() > expiryDate;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —ç–º–æ–¥–∑–∏
      let status, statusEmoji;
      if (key.isActive === 1 && !isExpired) {
        status = '–ê–∫—Ç–∏–≤–µ–Ω';
        statusEmoji = '‚úÖ';
      } else if (isExpired) {
        status = '–ò—Å—Ç–µ–∫';
        statusEmoji = '‚è±Ô∏è';
      } else {
        status = '–û—Ç–∫–ª—é—á–µ–Ω';
        statusEmoji = '‚ùå';
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞–Ω–∞ –∏ –µ–≥–æ —ç–º–æ–¥–∑–∏
      let planType, planEmoji;
      switch (key.plan) {
        case 'basic':
          planType = '–ë–∞–∑–æ–≤—ã–π';
          planEmoji = 'üîµ';
          break;
        case 'premium':
          planType = '–ü—Ä–µ–º–∏—É–º';
          planEmoji = 'üü£';
          break;
        case 'unlimited':
          planType = '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π';
          planEmoji = '‚≠ê';
          break;
        case 'trial':
          planType = '–ü—Ä–æ–±–Ω—ã–π';
          planEmoji = 'üî∂';
          break;
        default:
          planType = key.plan.charAt(0).toUpperCase() + key.plan.slice(1);
          planEmoji = 'üîπ';
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞
      const formattedExpiry = expiryDate.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –≤–∏–¥–µ —ç–º–æ–¥–∑–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
      let progressBar = '';
      if (!isExpired && key.isActive === 1) {
        const totalDuration = (new Date(key.expires) - new Date(key.created));
        const elapsed = (Date.now() - new Date(key.created));
        const percentage = Math.min(100, Math.max(0, Math.floor(elapsed / totalDuration * 100)));
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏–∑ —ç–º–æ–¥–∑–∏
        const fullBlocks = Math.floor(percentage / 10);
        
        progressBar = '‚ñì'.repeat(fullBlocks) + '‚ñë'.repeat(10 - fullBlocks) + ` ${percentage}%`;
      }
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
      const keyMessage = `
${planEmoji} *VPN –∫–ª—é—á #${i+1} - ${planType}*

üîë *ID –∫–ª—é—á–∞:* \`${key.uuid}\`
${statusEmoji} *–°—Ç–∞—Ç—É—Å:* ${status}
üìÖ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* ${formattedExpiry}
${key.period ? `‚è≥ *–ü–µ—Ä–∏–æ–¥:* ${key.period} –º–µ—Å.\n` : ''}
${progressBar ? `üìä *–û—Å—Ç–∞–ª–æ—Å—å:* ${progressBar}\n` : ''}
${key.isTrial === 1 ? '‚ö†Ô∏è –≠—Ç–æ –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á\n' : ''}
`;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫–ª—é—á–∞
      const keyboardButtons = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      if (key.isActive === 1 && !isExpired) {
        keyboardButtons.push([
          { text: 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é', callback_data: `show_config_${key.uuid}` }
        ]);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –ø—Ä–æ–±–Ω—ã–π
      if (key.isTrial !== 1) {
        keyboardButtons.push([
          { text: 'üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', url: `${process.env.FRONTEND_URL || 'https://kittypoopvpn.com'}/profile?renew=${key.uuid}` }
        ]);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
      keyboardButtons.push([
        { text: 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url: `${process.env.FRONTEND_URL || 'https://kittypoopvpn.com'}/profile` }
      ]);
      
      await bot.sendMessage(chatId, keyMessage, { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboardButtons
        }
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
    await bot.sendMessage(chatId, 
      '*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏*\n\n' +
      '–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–∞–π—Ç–æ–º.', 
      { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
          ]
        }
      }
    );
  } else if (data === 'back_to_main') {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    bot.sendPhoto(chatId, 'https://i.imgur.com/V1RwQVE.jpg', {
      caption: `üéâ *–ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç KittyPoopVPN* üê±\n\n`+
        `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º VPN-–∞–∫–∫–∞—É–Ω—Ç–æ–º –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –∫–ª—é—á–∞—Ö.`,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'my_profile' }],
          [{ text: 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url: process.env.FRONTEND_URL || 'https://kittypoopvpn.com' }]
        ]
      }
    });
  } else if (data === 'trial_key') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await User.findByTelegramId(userId);
    
    if (!user) {
      await bot.sendMessage(chatId, 
        '‚ùå *–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ*\n\n' +
        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.',
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', url: process.env.FRONTEND_URL || 'https://kittypoopvpn.com' }]
            ]
          }
        }
      );
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const activeKeys = await VpnKey.find({ userId: user.id, isActive: 1, isTrial: 1 });
    
    if (activeKeys && activeKeys.length > 0) {
      const expiryDate = new Date(activeKeys[0].expires);
      const formattedDate = expiryDate.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      await bot.sendMessage(chatId, 
        '‚ö†Ô∏è *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á*\n\n' +
        `–í–∞—à –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${formattedDate}\n\n` +
        '–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á –∏–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –µ–≥–æ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á.',
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'my_profile' }]
            ]
          }
        }
      );
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á
    await bot.sendMessage(chatId, 'üîÑ *–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á...*', { parse_mode: 'Markdown' });
    
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è –∫–ª—é—á–∞
      const uuid = `vpn_${crypto.randomBytes(8).toString('hex')}`;
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ - 1 —á–∞—Å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      const now = new Date();
      const expiry = new Date(now.getTime() + 60 * 60 * 1000);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN
      const vpnConfig = `client
dev tun
proto udp
remote vpn.kittypoopvpn.com 1194
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
cipher AES-256-GCM
auth SHA256
verb 3
key-direction 1
<key>
${crypto.randomBytes(64).toString('base64')}
</key>
<cert>
${crypto.randomBytes(64).toString('base64')}
</cert>
<ca>
${crypto.randomBytes(64).toString('base64')}
</ca>
<tls-auth>
${crypto.randomBytes(64).toString('base64')}
</tls-auth>`;
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–±–Ω–æ–º –∫–ª—é—á–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const vpnKeyData = {
        uuid,
        userId: user.id,
        plan: 'trial',
        period: 0, // 0 –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞
        created: now.toISOString(),
        expires: expiry.toISOString(),
        isActive: 1,
        isTrial: 1,
        config: vpnConfig
      };
      
      const vpnKey = await VpnKey.create(vpnKeyData);
      
      // –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN
      const qrCodeUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(vpnConfig)}`;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞
      const formattedExpiry = expiry.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
      await bot.sendPhoto(chatId, qrCodeUrl, {
        caption: `üéâ *–í–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –≥–æ—Ç–æ–≤!* üéâ\n\n–ù–∏–∂–µ QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n–°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.`,
        parse_mode: 'Markdown'
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ
      const message = `
üìã *–î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—é—á–∞:*
‚Ä¢ UUID: \`${uuid}\`
‚Ä¢ –¢–∏–ø: OpenVPN
‚Ä¢ –ü–ª–∞–Ω: –¢–µ—Å—Ç–æ–≤—ã–π (1 —á–∞—Å)
‚Ä¢ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${formattedExpiry}

üì± *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:*
1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ OpenVPN –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥
3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É

‚öôÔ∏è *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:*
\`\`\`
${vpnConfig}
\`\`\`

‚è±Ô∏è –í–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.
–ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–ª–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.
      `;
      
      await bot.sendMessage(chatId, message, { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data: 'my_profile' }]
          ]
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—é—á–∞:', error);
      await bot.sendMessage(chatId, 
        '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—é—á–∞*\n\n' +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'my_profile' }]
            ]
          }
        }
      );
    }
  } else if (data.startsWith('show_config_')) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –∫–ª—é—á–∞ –∏–∑ callback data
    const keyUuid = data.replace('show_config_', '');
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const key = await VpnKey.findByUuid(keyUuid);
      
      if (!key) {
        await bot.sendMessage(chatId, 
          '‚ùå *–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω*\n\n' +
          '–£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.',
          { 
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'my_profile' }]
              ]
            }
          }
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∫–ª—é—á —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const user = await User.findByTelegramId(userId);
      
      if (!user || key.userId !== user.id) {
        await bot.sendMessage(chatId, 
          '‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω*\n\n' +
          '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª—é—á—É.',
          { 
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'my_profile' }]
              ]
            }
          }
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫–ª—é—á
      const now = new Date();
      const expiryDate = new Date(key.expires);
      const isExpired = now > expiryDate;
      
      if (isExpired || key.isActive !== 1) {
        await bot.sendMessage(chatId, 
          '‚ö†Ô∏è *–ö–ª—é—á –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω*\n\n' +
          '–≠—Ç–æ—Ç –∫–ª—é—á –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á.',
          { 
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', url: `${process.env.FRONTEND_URL || 'https://kittypoopvpn.com'}/profile?renew=${keyUuid}` }],
                [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'my_profile' }]
              ]
            }
          }
        );
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN
      const qrCodeUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(key.config)}`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
      await bot.sendPhoto(chatId, qrCodeUrl, {
        caption: `üîë *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VPN –∫–ª—é—á–∞*\n\nN–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∏–∂–µ.`,
        parse_mode: 'Markdown'
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª—é—á–∞
      await bot.sendMessage(chatId, 
        `üìã *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª—é—á–∞* \`${keyUuid}\`\n\n` +
        '```\n' +
        `${key.config}\n` +
        '```\n\n' +
        'üì± *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:*\n' +
        '1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ OpenVPN –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n' +
        '2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—ã—à–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥\n' +
        '3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n' +
        '4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É',
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '¬´ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', callback_data: 'my_profile' }]
            ]
          }
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞:', error);
      await bot.sendMessage(chatId, 
        '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n' +
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'my_profile' }]
            ]
          }
        }
      );
    }
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª—é—á–µ–π
app.get('/api/admin/keys/status', async (req, res) => {
  try {
    const stats = await keyManager.getKeysStatistics();
    res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—é—á–µ–π:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—é—á–µ–π'
    });
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–π
app.post('/api/admin/keys/cleanup', async (req, res) => {
  try {
    const daysAgo = req.body.daysAgo || 7;
    const result = await keyManager.cleanupOldTrialKeys(daysAgo);
    res.json({
      success: true,
      deleted: result.deleted
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π'
    });
  }
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
app.post('/api/manual-payment', async (req, res) => {
  try {
    const { amount, currency, plan, period, userId } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!plan || !period || !userId) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ 
        success: false, 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞–Ω–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
    let finalAmount;
    if (amount) {
      // –ï—Å–ª–∏ —Å—É–º–º–∞ —É–∂–µ –∑–∞–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
      finalAmount = amount;
    } else {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
      if (period === 'yearly' || period === 12) {
        finalAmount = 1500; // –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - 1500‚ÇΩ
      } else if (period === 'quarterly' || period === 3) {
        finalAmount = 500; // –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - 500‚ÇΩ
      } else if (period === 'monthly' || period === 1 || 
                (typeof period === 'string' && period.toLowerCase() === 'monthly')) {
        finalAmount = 200; // –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - 200‚ÇΩ
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        finalAmount = 200;
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
      if (plan === 'premium') {
        // –ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω (–ù–∞—à —Å–ª–æ–Ω—è—Ä–∞) - –≤—Å–µ–≥–¥–∞ –≥–æ–¥–æ–≤–æ–π
        finalAmount = 1500;
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞
    const paymentId = generatePaymentId();
    
    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ (24 —á–∞—Å–∞)
    const expiryTime = new Date(Date.now() + 24 * 60 * 60 * 1000);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∏—Å–ª–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    let numericPeriod;
    if (period === 'yearly') {
      numericPeriod = 12;
    } else if (period === 'quarterly') {
      numericPeriod = 3;
    } else if (period === 'monthly') {
      numericPeriod = 1;
    } else {
      // –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∑–∞–¥–∞–Ω —á–∏—Å–ª–æ–º
      numericPeriod = parseInt(period);
      if (isNaN(numericPeriod) || numericPeriod <= 0) {
        numericPeriod = 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–µ—Å—è—Ü
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const paymentData = {
      paymentId,
      userId,
      status: 'pending',
      amount: finalAmount,
      currency: 'RUB',
      method: 'manual_tinkoff',
      cardNumber: '2200700774500382', // –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¢–∏–Ω—å–∫–æ—Ñ—Ñ
      plan,
      period: numericPeriod,
      expiryTime: expiryTime.toISOString()
    };
    
    const payment = await Payment.create(paymentData);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Ç–≤–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    return res.json({
      success: true,
      payment: {
        paymentId,
        amount: finalAmount,
        currency: 'RUB',
        cardNumber: '2200700774500382',
        plan,
        period,
        expiryTime
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥:', error);
    return res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞'
    });
  }
});

// API –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥)
app.post('/api/manual-payment/:paymentId/confirm', async (req, res) => {
  try {
    const { paymentId } = req.params;
    
    // –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const payment = await Payment.findByPaymentId(paymentId);
    
    if (!payment) {
      return res.status(404).json({
        success: false,
        message: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    const now = new Date();
    if (payment.status !== 'pending' || now > new Date(payment.expiryTime)) {
      return res.status(400).json({
        success: false,
        message: '–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è'
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ "waiting_confirmation"
    await Payment.update(paymentId, { status: 'waiting_confirmation' });
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(payment.userId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram
    if (user) {
      // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const adminTelegramId = '434532312';
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const adminMessage = `
üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞* üîî

*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ:*
‚Ä¢ ID –ø–ª–∞—Ç–µ–∂–∞: \`${paymentId}\`
‚Ä¢ –°—É–º–º–∞: ${payment.amount} ${payment.currency}
‚Ä¢ –ü–ª–∞–Ω: ${payment.plan}
‚Ä¢ –ü–µ—Ä–∏–æ–¥: ${payment.period} –º–µ—Å.

*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:*
‚Ä¢ ID: ${user.id}
‚Ä¢ Telegram: ${user.username ? '@' + user.username : user.telegramId}
‚Ä¢ –ò–º—è: ${user.firstName || ''} ${user.lastName || ''}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç—É –¢–∏–Ω—å–∫–æ—Ñ—Ñ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –ø–ª–∞—Ç–µ–∂.
      `;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
      try {
        await bot.sendMessage(adminTelegramId, adminMessage, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `approve_payment_${paymentId}` },
                { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_payment_${paymentId}` }
              ]
            ]
          }
        });
        
        // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (user.telegramId) {
          await bot.sendMessage(user.telegramId, 
            `üîÑ *–í–∞—à –ø–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*\n\n` +
            `–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É ${payment.amount} ${payment.currency} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n` +
            `–û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.`,
            { parse_mode: 'Markdown' }
          );
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', error);
      }
    }
    
    return res.json({
      success: true,
      status: 'waiting_confirmation',
      message: '–ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', error);
    return res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞'
    });
  }
}); 